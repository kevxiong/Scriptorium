generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db?connection_limit=1&socket_timeout=15000"
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  phone     String?
  isAdmin   Boolean    @default(false)
  comments  Comment[]
  posts     Post[]
  ratings   Rating[]   @relation("UserRatings")
  reports   Report[]   @relation("UserReports")
  templates Template[]
}

model CodeSnippet {
  id   Int    @id @default(autoincrement())
  code String
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  userId      Int
  isHidden    Boolean    @default(false)
  comments    Comment[]
  user        User       @relation(fields: [userId], references: [id])
  rating      Rating[]
  reports     Report[]
  templates   Template[] @relation("PostTemplates")
  tags        Tag[]      @relation("PostToTag")
}

model Template {
  id               Int        @id @default(autoincrement())
  title            String
  code             String
  explanation      String?
  userId           Int
  forkedFrom       Int?
  originalTemplate Template?  @relation("TemplateForks", fields: [forkedFrom], references: [id])
  forks            Template[] @relation("TemplateForks")
  user             User       @relation(fields: [userId], references: [id])
  posts            Post[]     @relation("PostTemplates")
  tags             Tag[]      @relation("TemplateTags")
}

model Comment {
  id       Int      @id @default(autoincrement())
  content  String
  postId   Int
  userId   Int
  parentId Int?
  user     User     @relation(fields: [userId], references: [id])
  post     Post     @relation(fields: [postId], references: [id])
  rating   Rating[]
  reports  Report[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  upvote    Boolean
  downvote  Boolean
  userId    Int
  postId    Int?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation("UserRatings", fields: [userId], references: [id])
}

model Report {
  id        Int      @id @default(autoincrement())
  reason    String
  userId    Int
  commentId Int?
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  user      User     @relation("UserReports", fields: [userId], references: [id])
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  posts     Post[]     @relation("PostToTag")
  templates Template[] @relation("TemplateTags")
}
